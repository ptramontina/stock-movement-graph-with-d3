(function (d3) {
    'use strict';

    const render = data => {
          const width = 1800;
          const height = 1000;

          const margin = { top: 30, right: 100, bottom: 300, left: 70 };
          const innerWidth = width - margin.left - margin.right;
          const innerHeight = height - margin.top - margin.bottom;

          let svg = d3.select('#movement-chart')
            .append('svg')
            .attr('id', 'content-movement-chart')
            .attr('viewBox', `0 0 ${width} ${height}`)
            .append("g")
            .attr("transform",
              "translate(" + margin.left + "," + margin.top + ")");

          const amount = d => Math.abs(d.amount);
          const datetime = d => d.date;
          const stock = d => d.stock;
          const total = d => d.total;

          const scaleDateTime = d3.scalePoint()
            .domain(data.map(d => datetime(d)))
            .range([0, innerWidth])
            .padding(0.5)
            .align(-0.5);

          const scaleDateTimeBand = d3.scaleBand()
            .domain(data.map(d => datetime(d)))
            .range([0, innerWidth]);

          const scaleStock = d3.scaleBand()
            .domain(data.map(d => stock(d)))
            .range([0, innerHeight]);

          const columnSize = scaleDateTime.step();
          const columnSizeBand = scaleDateTimeBand.bandwidth();
          const lineSize = scaleStock.bandwidth();

          const scaleAmount = d3.scaleLinear()
            .domain([0, d3.max(data, d => amount(d))])
            .range([0, columnSize * .9]);

          svg = svg.append('g')
            .attr('transform', `translate(${margin.left}, ${margin.top})`);
          const xAxis = d3.axisBottom(scaleDateTimeBand)
            .tickFormat(date => date.format('L LTS'))
            .tickPadding(15);

          const xAxisG = svg.append('g')
            .attr('class', 'g-mov-x-axis')
            .call(xAxis)
            .attr('transform', `translate(0, ${innerHeight})`)
            .selectAll("text")
            .style("text-anchor", "start")
          	.attr('transform', `translate (20, 5) rotate (45)`);

          const yAxis = d3.axisLeft(scaleStock)
            .tickSizeInner(-innerWidth);
          const yAxisG = svg.append('g')
            .attr('class', 'g-mov-y-axis')
            .call(yAxis)
            .attr('font-size', 15)
            .attr("class", "y axis")
            .selectAll(".y.axis .tick line")
            .attr("transform", "translate(0," + scaleStock.bandwidth() / 2 + ")");

          const groups = svg.selectAll('.amount')
            .data(data)
            .attr('class', 'amount');

          const groupAmount = groups.enter().append('g');
          groupAmount
            .merge(groups)
            .attr('transform', (d) => {
              let x = (scaleDateTime(datetime(d)) + ((columnSize) - (d.total !== d.amount && d.amount < 0 ? scaleAmount(total(d) + amount(d)) : scaleAmount(total(d)))) / 2);
              let y = (scaleStock(stock(d)) + (lineSize / 4));
              return `translate(${x}, ${y})`
            });

          const textGroup = groups.enter().append('g');
          textGroup
            .merge(groups)
            .attr('transform', (d) => {
              let x = (scaleDateTime(datetime(d)) + ((columnSize) - scaleAmount(amount(d))) / 2);
              let y = (scaleStock(stock(d)) + (lineSize / 4));
              return `translate(${x}, ${y})`
            });

          groupAmount.append('rect')
            .merge(groups.select('rect-total'))
            .attr('class', 'g-mov-rect-positive')
            .attr('width', d => d.total !== d.amount && d.amount < 0 ? scaleAmount(total(d) + amount(d)) : scaleAmount(total(d)))
            .attr('height', lineSize / 2)
            .attr('rx', '2');

          groupAmount.append('rect')
            .merge(groups.select('rect-amount'))
            .attr('class', 'g-mov-rect-negative')
            .attr('width', d => scaleAmount(amount(d)))
            .attr('height', lineSize / 2)
            .attr('visibility', d => d.amount < 0 ? 'visible' : 'hidden')
            .attr('rx', '2');

          textGroup.append('text')
            .merge(groups.select('text-amount'))
            .text(d => d.amount)
            .attr('x', d => scaleAmount(amount(d)) / 2)
            .attr('y', lineSize / 4 + 5)
            .attr('class', d => 'g-mov-text-amount ' + (d.amount > 0 ? 'positive' : 'negative'));

          textGroup.append('text')
            .merge(groups.select('text-total'))
            .text(d => `Left: ${d.total}`)
            .attr('x', d => scaleAmount(amount(d)) / 2)
            .attr('y', -20)
            .attr('class', 'g-mov-text-total');

          svg.append('text')
            .attr('class', 'g-mov-title')
            .attr('y', -20)
            .attr('x', innerWidth / 2)
            .attr('text-anchor', 'middle')
            .text('Stock Movement');
        };

    d3.json('data.json').then(data => {
        data.forEach(d => d.date = moment(d.date));
        render(data);
    });

}(d3));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gICAgc2VsZWN0LFxuICAgIGNzdixcbiAgICBqc29uLFxuICAgIHNjYWxlTGluZWFyLFxuICAgIHNjYWxlUG9pbnQsXG4gICAgbWF4LFxuICAgIHNjYWxlQmFuZCxcbiAgICBheGlzTGVmdCxcbiAgICBheGlzQm90dG9tLFxuICAgIHRpbWVGb3JtYXQsXG4gICAgbGlua0hvcml6b250YWxcbn0gZnJvbSAnZDMnXG5cbmNvbnN0IHJlbmRlciA9IGRhdGEgPT4ge1xuICAgICAgY29uc3Qgd2lkdGggPSAxODAwXG4gICAgICBjb25zdCBoZWlnaHQgPSAxMDAwXG5cbiAgICAgIGNvbnN0IG1hcmdpbiA9IHsgdG9wOiAzMCwgcmlnaHQ6IDEwMCwgYm90dG9tOiAzMDAsIGxlZnQ6IDcwIH1cbiAgICAgIGNvbnN0IGlubmVyV2lkdGggPSB3aWR0aCAtIG1hcmdpbi5sZWZ0IC0gbWFyZ2luLnJpZ2h0XG4gICAgICBjb25zdCBpbm5lckhlaWdodCA9IGhlaWdodCAtIG1hcmdpbi50b3AgLSBtYXJnaW4uYm90dG9tXG5cbiAgICAgIGxldCBzdmcgPSBzZWxlY3QoJyNtb3ZlbWVudC1jaGFydCcpXG4gICAgICAgIC5hcHBlbmQoJ3N2ZycpXG4gICAgICAgIC5hdHRyKCdpZCcsICdjb250ZW50LW1vdmVtZW50LWNoYXJ0JylcbiAgICAgICAgLmF0dHIoJ3ZpZXdCb3gnLCBgMCAwICR7d2lkdGh9ICR7aGVpZ2h0fWApXG4gICAgICAgIC5hcHBlbmQoXCJnXCIpXG4gICAgICAgIC5hdHRyKFwidHJhbnNmb3JtXCIsXG4gICAgICAgICAgXCJ0cmFuc2xhdGUoXCIgKyBtYXJnaW4ubGVmdCArIFwiLFwiICsgbWFyZ2luLnRvcCArIFwiKVwiKVxuXG4gICAgICBjb25zdCBhbW91bnQgPSBkID0+IE1hdGguYWJzKGQuYW1vdW50KVxuICAgICAgY29uc3QgZGF0ZXRpbWUgPSBkID0+IGQuZGF0ZVxuICAgICAgY29uc3Qgc3RvY2sgPSBkID0+IGQuc3RvY2tcbiAgICAgIGNvbnN0IHRvdGFsID0gZCA9PiBkLnRvdGFsXG5cbiAgICAgIGNvbnN0IHNjYWxlRGF0ZVRpbWUgPSBzY2FsZVBvaW50KClcbiAgICAgICAgLmRvbWFpbihkYXRhLm1hcChkID0+IGRhdGV0aW1lKGQpKSlcbiAgICAgICAgLnJhbmdlKFswLCBpbm5lcldpZHRoXSlcbiAgICAgICAgLnBhZGRpbmcoMC41KVxuICAgICAgICAuYWxpZ24oLTAuNSlcblxuICAgICAgY29uc3Qgc2NhbGVEYXRlVGltZUJhbmQgPSBzY2FsZUJhbmQoKVxuICAgICAgICAuZG9tYWluKGRhdGEubWFwKGQgPT4gZGF0ZXRpbWUoZCkpKVxuICAgICAgICAucmFuZ2UoWzAsIGlubmVyV2lkdGhdKVxuXG4gICAgICBjb25zdCBzY2FsZVN0b2NrID0gc2NhbGVCYW5kKClcbiAgICAgICAgLmRvbWFpbihkYXRhLm1hcChkID0+IHN0b2NrKGQpKSlcbiAgICAgICAgLnJhbmdlKFswLCBpbm5lckhlaWdodF0pXG5cbiAgICAgIGNvbnN0IGNvbHVtblNpemUgPSBzY2FsZURhdGVUaW1lLnN0ZXAoKVxuICAgICAgY29uc3QgY29sdW1uU2l6ZUJhbmQgPSBzY2FsZURhdGVUaW1lQmFuZC5iYW5kd2lkdGgoKVxuICAgICAgY29uc3QgbGluZVNpemUgPSBzY2FsZVN0b2NrLmJhbmR3aWR0aCgpXG5cbiAgICAgIGNvbnN0IHNjYWxlQW1vdW50ID0gc2NhbGVMaW5lYXIoKVxuICAgICAgICAuZG9tYWluKFswLCBtYXgoZGF0YSwgZCA9PiBhbW91bnQoZCkpXSlcbiAgICAgICAgLnJhbmdlKFswLCBjb2x1bW5TaXplICogLjldKVxuXG4gICAgICBzdmcgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHttYXJnaW4ubGVmdH0sICR7bWFyZ2luLnRvcH0pYCk7XG5cbiAgICAgIGNvbnN0IHhBeGlzVGlja2Zvcm1hdCA9IGRhdGUgPT4gdGltZUZvcm1hdCgnJWQvJW0vJVkgJUg6JU06JVMnKShkYXRlKVxuICAgICAgY29uc3QgeEF4aXMgPSBheGlzQm90dG9tKHNjYWxlRGF0ZVRpbWVCYW5kKVxuICAgICAgICAudGlja0Zvcm1hdChkYXRlID0+IGRhdGUuZm9ybWF0KCdMIExUUycpKVxuICAgICAgICAudGlja1BhZGRpbmcoMTUpXG5cbiAgICAgIGNvbnN0IHhBeGlzRyA9IHN2Zy5hcHBlbmQoJ2cnKVxuICAgICAgICAuYXR0cignY2xhc3MnLCAnZy1tb3YteC1heGlzJylcbiAgICAgICAgLmNhbGwoeEF4aXMpXG4gICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKDAsICR7aW5uZXJIZWlnaHR9KWApXG4gICAgICAgIC5zZWxlY3RBbGwoXCJ0ZXh0XCIpXG4gICAgICAgIC5zdHlsZShcInRleHQtYW5jaG9yXCIsIFwic3RhcnRcIilcbiAgICAgIFx0LmF0dHIoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUgKDIwLCA1KSByb3RhdGUgKDQ1KWApXG5cbiAgICAgIGNvbnN0IHlBeGlzID0gYXhpc0xlZnQoc2NhbGVTdG9jaylcbiAgICAgICAgLnRpY2tTaXplSW5uZXIoLWlubmVyV2lkdGgpXG4gICAgICBjb25zdCB5QXhpc0cgPSBzdmcuYXBwZW5kKCdnJylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ctbW92LXktYXhpcycpXG4gICAgICAgIC5jYWxsKHlBeGlzKVxuICAgICAgICAuYXR0cignZm9udC1zaXplJywgMTUpXG4gICAgICAgIC5hdHRyKFwiY2xhc3NcIiwgXCJ5IGF4aXNcIilcbiAgICAgICAgLnNlbGVjdEFsbChcIi55LmF4aXMgLnRpY2sgbGluZVwiKVxuICAgICAgICAuYXR0cihcInRyYW5zZm9ybVwiLCBcInRyYW5zbGF0ZSgwLFwiICsgc2NhbGVTdG9jay5iYW5kd2lkdGgoKSAvIDIgKyBcIilcIilcblxuICAgICAgY29uc3QgZ3JvdXBzID0gc3ZnLnNlbGVjdEFsbCgnLmFtb3VudCcpXG4gICAgICAgIC5kYXRhKGRhdGEpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdhbW91bnQnKVxuXG4gICAgICBjb25zdCBncm91cEFtb3VudCA9IGdyb3Vwcy5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICBncm91cEFtb3VudFxuICAgICAgICAubWVyZ2UoZ3JvdXBzKVxuICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKGQpID0+IHtcbiAgICAgICAgICBsZXQgeCA9IChzY2FsZURhdGVUaW1lKGRhdGV0aW1lKGQpKSArICgoY29sdW1uU2l6ZSkgLSAoZC50b3RhbCAhPT0gZC5hbW91bnQgJiYgZC5hbW91bnQgPCAwID8gc2NhbGVBbW91bnQodG90YWwoZCkgKyBhbW91bnQoZCkpIDogc2NhbGVBbW91bnQodG90YWwoZCkpKSkgLyAyKVxuICAgICAgICAgIGxldCB5ID0gKHNjYWxlU3RvY2soc3RvY2soZCkpICsgKGxpbmVTaXplIC8gNCkpXG4gICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgIH0pXG5cbiAgICAgIGNvbnN0IHRleHRHcm91cCA9IGdyb3Vwcy5lbnRlcigpLmFwcGVuZCgnZycpXG4gICAgICB0ZXh0R3JvdXBcbiAgICAgICAgLm1lcmdlKGdyb3VwcylcbiAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIChkKSA9PiB7XG4gICAgICAgICAgbGV0IHggPSAoc2NhbGVEYXRlVGltZShkYXRldGltZShkKSkgKyAoKGNvbHVtblNpemUpIC0gc2NhbGVBbW91bnQoYW1vdW50KGQpKSkgLyAyKVxuICAgICAgICAgIGxldCB5ID0gKHNjYWxlU3RvY2soc3RvY2soZCkpICsgKGxpbmVTaXplIC8gNCkpXG4gICAgICAgICAgcmV0dXJuIGB0cmFuc2xhdGUoJHt4fSwgJHt5fSlgXG4gICAgICAgIH0pXG5cbiAgICAgIGdyb3VwQW1vdW50LmFwcGVuZCgncmVjdCcpXG4gICAgICAgIC5tZXJnZShncm91cHMuc2VsZWN0KCdyZWN0LXRvdGFsJykpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdnLW1vdi1yZWN0LXBvc2l0aXZlJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiBkLnRvdGFsICE9PSBkLmFtb3VudCAmJiBkLmFtb3VudCA8IDAgPyBzY2FsZUFtb3VudCh0b3RhbChkKSArIGFtb3VudChkKSkgOiBzY2FsZUFtb3VudCh0b3RhbChkKSkpXG4gICAgICAgIC5hdHRyKCdoZWlnaHQnLCBsaW5lU2l6ZSAvIDIpXG4gICAgICAgIC5hdHRyKCdyeCcsICcyJylcblxuICAgICAgZ3JvdXBBbW91bnQuYXBwZW5kKCdyZWN0JylcbiAgICAgICAgLm1lcmdlKGdyb3Vwcy5zZWxlY3QoJ3JlY3QtYW1vdW50JykpXG4gICAgICAgIC5hdHRyKCdjbGFzcycsICdnLW1vdi1yZWN0LW5lZ2F0aXZlJylcbiAgICAgICAgLmF0dHIoJ3dpZHRoJywgZCA9PiBzY2FsZUFtb3VudChhbW91bnQoZCkpKVxuICAgICAgICAuYXR0cignaGVpZ2h0JywgbGluZVNpemUgLyAyKVxuICAgICAgICAuYXR0cigndmlzaWJpbGl0eScsIGQgPT4gZC5hbW91bnQgPCAwID8gJ3Zpc2libGUnIDogJ2hpZGRlbicpXG4gICAgICAgIC5hdHRyKCdyeCcsICcyJylcblxuICAgICAgdGV4dEdyb3VwLmFwcGVuZCgndGV4dCcpXG4gICAgICAgIC5tZXJnZShncm91cHMuc2VsZWN0KCd0ZXh0LWFtb3VudCcpKVxuICAgICAgICAudGV4dChkID0+IGQuYW1vdW50KVxuICAgICAgICAuYXR0cigneCcsIGQgPT4gc2NhbGVBbW91bnQoYW1vdW50KGQpKSAvIDIpXG4gICAgICAgIC5hdHRyKCd5JywgbGluZVNpemUgLyA0ICsgNSlcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgZCA9PiAnZy1tb3YtdGV4dC1hbW91bnQgJyArIChkLmFtb3VudCA+IDAgPyAncG9zaXRpdmUnIDogJ25lZ2F0aXZlJykpXG5cbiAgICAgIHRleHRHcm91cC5hcHBlbmQoJ3RleHQnKVxuICAgICAgICAubWVyZ2UoZ3JvdXBzLnNlbGVjdCgndGV4dC10b3RhbCcpKVxuICAgICAgICAudGV4dChkID0+IGBMZWZ0OiAke2QudG90YWx9YClcbiAgICAgICAgLmF0dHIoJ3gnLCBkID0+IHNjYWxlQW1vdW50KGFtb3VudChkKSkgLyAyKVxuICAgICAgICAuYXR0cigneScsIC0yMClcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ctbW92LXRleHQtdG90YWwnKVxuXG4gICAgICBzdmcuYXBwZW5kKCd0ZXh0JylcbiAgICAgICAgLmF0dHIoJ2NsYXNzJywgJ2ctbW92LXRpdGxlJylcbiAgICAgICAgLmF0dHIoJ3knLCAtMjApXG4gICAgICAgIC5hdHRyKCd4JywgaW5uZXJXaWR0aCAvIDIpXG4gICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKVxuICAgICAgICAudGV4dCgnU3RvY2sgTW92ZW1lbnQnKVxuICAgIH1cblxuanNvbignZGF0YS5qc29uJykudGhlbihkYXRhID0+IHtcbiAgICBkYXRhLmZvckVhY2goZCA9PiBkLmRhdGUgPSBtb21lbnQoZC5kYXRlKSlcbiAgICByZW5kZXIoZGF0YSlcbn0pIl0sIm5hbWVzIjpbInNlbGVjdCIsInNjYWxlUG9pbnQiLCJzY2FsZUJhbmQiLCJzY2FsZUxpbmVhciIsIm1heCIsImF4aXNCb3R0b20iLCJheGlzTGVmdCIsImpzb24iXSwibWFwcGluZ3MiOiI7OztJQWNBLE1BQU0sTUFBTSxHQUFHLElBQUksSUFBSTtJQUN2QixNQUFNLE1BQU0sS0FBSyxHQUFHLEtBQUk7SUFDeEIsTUFBTSxNQUFNLE1BQU0sR0FBRyxLQUFJO0FBQ3pCO0lBQ0EsTUFBTSxNQUFNLE1BQU0sR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQUUsS0FBSyxFQUFFLEdBQUcsRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxFQUFFLEdBQUU7SUFDbkUsTUFBTSxNQUFNLFVBQVUsR0FBRyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsTUFB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